openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /categories:
    get:
      tags:
      - category-entity-controller
      description: get-category
      operationId: getCollectionResource-category-get
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/PagedModelEntityModelCategory"
            application/x-spring-data-compact+json:
              schema:
                $ref: "#/components/schemas/PagedModelEntityModelCategory"
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - category-entity-controller
      description: create-category
      operationId: postCollectionResource-category-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequestBody"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
  /categories/search/existsByName:
    get:
      tags:
      - category-search-controller
      operationId: executeSearch-category-get
      parameters:
      - name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: boolean
        "404":
          description: Not Found
  /categories/{id}:
    get:
      tags:
      - category-entity-controller
      description: get-category
      operationId: getItemResource-category-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "404":
          description: Not Found
    put:
      tags:
      - category-entity-controller
      description: update-category
      operationId: putItemResource-category-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "204":
          description: No Content
    delete:
      tags:
      - category-entity-controller
      description: delete-category
      operationId: deleteItemResource-category-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - category-entity-controller
      description: patch-category
      operationId: patchItemResource-category-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "204":
          description: No Content
  /orders:
    get:
      tags:
      - order-entity-controller
      description: get-order
      operationId: getCollectionResource-order-get
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/PagedModelEntityModelOrder"
            application/x-spring-data-compact+json:
              schema:
                $ref: "#/components/schemas/PagedModelEntityModelOrder"
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - order-entity-controller
      description: create-order
      operationId: postCollectionResource-order-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequestBody"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
  /orders/{id}:
    get:
      tags:
      - order-entity-controller
      description: get-order
      operationId: getItemResource-order-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
        "404":
          description: Not Found
    put:
      tags:
      - order-entity-controller
      description: update-order
      operationId: putItemResource-order-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
        "204":
          description: No Content
    delete:
      tags:
      - order-entity-controller
      description: delete-order
      operationId: deleteItemResource-order-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - order-entity-controller
      description: patch-order
      operationId: patchItemResource-order-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelOrder"
        "204":
          description: No Content
  /orders/{id}/products:
    get:
      tags:
      - order-property-reference-controller
      description: get-product-by-order-Id
      operationId: followPropertyReference-order-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CollectionModelProduct"
            text/uri-list:
              schema:
                type: string
        "404":
          description: Not Found
    put:
      tags:
      - order-property-reference-controller
      description: update-product-by-order-Id
      operationId: createPropertyReference-order-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionModelObject"
          application/x-spring-data-compact+json:
            schema:
              $ref: "#/components/schemas/CollectionModelObject"
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CollectionModelProduct"
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CollectionModelProduct"
        "204":
          description: No Content
    delete:
      tags:
      - order-property-reference-controller
      description: delete-product-by-order-Id
      operationId: deletePropertyReference-order-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - order-property-reference-controller
      description: patch-product-by-order-Id
      operationId: createPropertyReference-order-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionModelObject"
          application/x-spring-data-compact+json:
            schema:
              $ref: "#/components/schemas/CollectionModelObject"
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CollectionModelProduct"
        "204":
          description: No Content
  /orders/{id}/products/{propertyId}:
    get:
      tags:
      - order-property-reference-controller
      description: get-product-by-order-Id
      operationId: followPropertyReference-order-get_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/CollectionModelProduct"
        "404":
          description: Not Found
    delete:
      tags:
      - order-property-reference-controller
      description: delete-product-by-order-Id
      operationId: deletePropertyReferenceId-order-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
  /products:
    get:
      tags:
      - product-entity-controller
      description: get-product
      operationId: getCollectionResource-product-get
      parameters:
      - name: page
        in: query
        description: Zero-based page index (0..N)
        required: false
        schema:
          minimum: 0
          type: integer
          default: 0
      - name: size
        in: query
        description: The size of the page to be returned
        required: false
        schema:
          minimum: 1
          type: integer
          default: 20
      - name: sort
        in: query
        description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        required: false
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/PagedModelEntityModelProduct"
            application/x-spring-data-compact+json:
              schema:
                $ref: "#/components/schemas/PagedModelEntityModelProduct"
            text/uri-list:
              schema:
                type: string
    post:
      tags:
      - product-entity-controller
      description: create-product
      operationId: postCollectionResource-product-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequestBody"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelProduct"
  /products/search/existsByName:
    get:
      tags:
      - product-search-controller
      operationId: executeSearch-product-get
      parameters:
      - name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: boolean
        "404":
          description: Not Found
  /products/{id}:
    get:
      tags:
      - product-entity-controller
      description: get-product
      operationId: getItemResource-product-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelProduct"
        "404":
          description: Not Found
    put:
      tags:
      - product-entity-controller
      description: update-product
      operationId: putItemResource-product-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelProduct"
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelProduct"
        "204":
          description: No Content
    delete:
      tags:
      - product-entity-controller
      description: delete-product
      operationId: deleteItemResource-product-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - product-entity-controller
      description: patch-product
      operationId: patchItemResource-product-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductRequestBody"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelProduct"
        "204":
          description: No Content
  /products/{id}/category:
    get:
      tags:
      - product-property-reference-controller
      description: get-category-by-product-Id
      operationId: followPropertyReference-product-get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
            text/uri-list:
              schema:
                type: string
        "404":
          description: Not Found
    put:
      tags:
      - product-property-reference-controller
      description: update-category-by-product-Id
      operationId: createPropertyReference-product-put
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionModelObject"
          application/x-spring-data-compact+json:
            schema:
              $ref: "#/components/schemas/CollectionModelObject"
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "201":
          description: Created
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "204":
          description: No Content
    delete:
      tags:
      - product-property-reference-controller
      description: delete-category-by-product-Id
      operationId: deletePropertyReference-product-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
    patch:
      tags:
      - product-property-reference-controller
      description: patch-category-by-product-Id
      operationId: createPropertyReference-product-patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CollectionModelObject"
          application/x-spring-data-compact+json:
            schema:
              $ref: "#/components/schemas/CollectionModelObject"
          text/uri-list:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "204":
          description: No Content
  /products/{id}/category/{propertyId}:
    get:
      tags:
      - product-property-reference-controller
      description: get-category-by-product-Id
      operationId: followPropertyReference-product-get_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/EntityModelCategory"
        "404":
          description: Not Found
    delete:
      tags:
      - product-property-reference-controller
      description: delete-category-by-product-Id
      operationId: deletePropertyReferenceId-product-delete
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: propertyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
  /profile:
    get:
      tags:
      - profile-controller
      operationId: listAllFormsOfMetadata
      responses:
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/RepresentationModelObject"
  /profile/categories:
    get:
      tags:
      - profile-controller
      operationId: descriptor
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: "#/components/schemas/JsonSchema"
  /profile/orders:
    get:
      tags:
      - profile-controller
      operationId: descriptor_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: "#/components/schemas/JsonSchema"
  /profile/products:
    get:
      tags:
      - profile-controller
      operationId: descriptor_2
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
            application/alps+json:
              schema:
                type: string
            application/schema+json:
              schema:
                $ref: "#/components/schemas/JsonSchema"
  /api/products/{id}:
    get:
      tags:
      - product-controller
      operationId: getProductById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/ProductDTO"
    put:
      tags:
      - product-controller
      operationId: updateProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/ProductDTO"
    delete:
      tags:
      - product-controller
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "200":
          description: OK
  /api/products:
    get:
      tags:
      - product-controller
      operationId: getAllProducts
      responses:
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductDTO"
    post:
      tags:
      - product-controller
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductDTO"
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "500":
          description: Internal Server Error
          content:
            application/hal+json:
              schema:
                type: object
                additionalProperties:
                  type: object
        "200":
          description: OK
          content:
            application/hal+json:
              schema:
                $ref: "#/components/schemas/ProductDTO"
components:
  schemas:
    AbstractJsonSchemaPropertyObject:
      type: object
      properties:
        title:
          type: string
        readOnly:
          type: boolean
    Item:
      type: object
      properties:
        type:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AbstractJsonSchemaPropertyObject"
        requiredProperties:
          type: array
          items:
            type: string
    JsonSchema:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        properties:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/AbstractJsonSchemaPropertyObject"
        requiredProperties:
          type: array
          items:
            type: string
        definitions:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/Item"
        type:
          type: string
        $schema:
          type: string
    Links:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/Link"
    RepresentationModelObject:
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/Links"
    EntityModelCategory:
      type: object
      properties:
        _links:
          $ref: "#/components/schemas/Links"
    PageMetadata:
      type: object
      properties:
        size:
          type: integer
          format: int64
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int64
        number:
          type: integer
          format: int64
    PagedModelEntityModelCategory:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: "#/components/schemas/EntityModelCategory"
        _links:
          $ref: "#/components/schemas/Links"
        page:
          $ref: "#/components/schemas/PageMetadata"
    EntityModelProduct:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        _links:
          $ref: "#/components/schemas/Links"
    PagedModelEntityModelProduct:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            products:
              type: array
              items:
                $ref: "#/components/schemas/EntityModelProduct"
        _links:
          $ref: "#/components/schemas/Links"
        page:
          $ref: "#/components/schemas/PageMetadata"
    CollectionModelObject:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            objects:
              type: array
              items:
                type: object
        _links:
          $ref: "#/components/schemas/Links"
    EntityModelOrder:
      type: object
      properties:
        totalPrice:
          type: number
        status:
          type: string
        _links:
          $ref: "#/components/schemas/Links"
    PagedModelEntityModelOrder:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            orders:
              type: array
              items:
                $ref: "#/components/schemas/EntityModelOrder"
        _links:
          $ref: "#/components/schemas/Links"
        page:
          $ref: "#/components/schemas/PageMetadata"
    CollectionModelProduct:
      type: object
      properties:
        _embedded:
          type: object
          properties:
            products:
              type: array
              items:
                $ref: "#/components/schemas/ProductResponse"
        _links:
          $ref: "#/components/schemas/Links"
    CategoryRequestBody:
      type: object
    OrderRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        products:
          type: array
          items:
            type: string
        totalPrice:
          type: number
        status:
          type: string
    ProductRequestBody:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: number
        category:
          type: string
    ProductResponse:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
    ProductDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: number
        categoryId:
          type: integer
          format: int64
    Link:
      type: object
      properties:
        href:
          type: string
        hreflang:
          type: string
        title:
          type: string
        type:
          type: string
        deprecation:
          type: string
        profile:
          type: string
        name:
          type: string
        templated:
          type: boolean
